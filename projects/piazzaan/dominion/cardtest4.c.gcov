        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * -----------------------------------------------------------------------
        -:    3: * cardtest4.c
        -:    4: * CS 362_400
        -:    5: * Antonio Piazza
        -:    6: * piazzaan
        -:    7: * 7/15/2108
        -:    8: * 
        -:    9: * Card test 4 for Dominion Village card
        -:   10: * 
        -:   11: * Include the following lines in your makefile:
        -:   12: *
        -:   13: * echo "cardtest4.c:" >> unittestresults.out
        -:   14: * gcc -o cardtest4 -g cardtest4.c dominion.c rngs.c $(CFLAGS)
        -:   15: * ./cardtest4 >> unittestresults.out
        -:   16: * gcov cardtest4.c
        -:   17: *
        -:   18: * references: 
        -:   19: * -----------------------------------------------------------------------
        -:   20: */
        -:   21:
        -:   22:#include "dominion.h"
        -:   23:#include <stdio.h>
        -:   24:#include "dominion_helpers.h"
        -:   25:#include "rngs.h"
        -:   26:
        -:   27:
        -:   28:// Variable to keep count of test fails
        -:   29:int failCnt = 0;
        -:   30:
        -:   31:/*
        -:   32: * To avoid making it hard to collect coverage when a test fails, 
        -:   33: * using my own asserttrue function instead of the standard C assert 
        -:   34: * (which basically crashes the code and fails to collect coverage). 
        -:   35: * My assert also prints whether the test passes or fails.  If the test   
        -:   36: * fails the fail counter int variable will increment by 1.
        -:   37: */
function assertTrue called 18 returned 100% blocks executed 60%
       18:   38: void assertTrue(int int1, int int2) 
        -:   39: {
       18:   40:	if (int1 == int2) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   41:	{
       18:   42:		printf("Test Passed\n");
call    0 returned 100%
        -:   43:	} 
        -:   44:	else
        -:   45:	{
    #####:   46:		printf("Test Failed\n");
call    0 never executed
    #####:   47:		failCnt++;
        -:   48:	}
       18:   49: }
        -:   50: 
        -:   51: 
        -:   52: // Main function
function main called 1 returned 100% blocks executed 98%
        1:   53: int main()
        -:   54: {
        -:   55:	int i, playerTurn, playerTurnAfterEnd;
        1:   56:	int numPlayer = 2;
        1:   57:	int player1 = 0, handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   58:	int player2 = 1;
        1:   59:	int seed = 1000;
        1:   60:	int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   61:		, remodel, smithy, village, baron, great_hall};
        -:   62:		
        -:   63:	// Initialize two game states
        -:   64:	struct gameState gState, copyGState;
        -:   65:
        -:   66:
        -:   67: 
        1:   68:	printf ("\n---------------------------------------------------\nTESTING Village CARD:\n---------------------------------------------------");
call    0 returned 100%
        -:   69:	
        -:   70:	// Set Game State
        1:   71:	memset(&gState,23,sizeof(struct gameState));
        1:   72:	memset(&copyGState,23,sizeof(struct gameState));
        -:   73:	
        -:   74:	// Initialize game
        1:   75:	initializeGame(numPlayer, k, seed, &gState);
call    0 returned 100%
        -:   76:	
        -:   77:	// copy the game state to the copy to preserve the game state
        1:   78:	 memcpy(&copyGState, &gState, sizeof(struct gameState));
        -:   79:	 
        -:   80:	// call card effect function for Village
        1:   81:	cardEffect(village, choice1, choice2, choice3, &gState, handpos, &bonus);
call    0 returned 100%
        -:   82:	
        -:   83:	
        -:   84:	
        -:   85:	// Check Results
        -:   86:	// Requirement:  Player 1 receives exactly 1 card
        1:   87:	printf("\nPlayer 1 receives one card\n");
call    0 returned 100%
        1:   88:	printf("Expected: %d\n", copyGState.handCount[player1]);
call    0 returned 100%
        1:   89:	printf("Result: %d\n", gState.handCount[player1]);
call    0 returned 100%
        1:   90:	assertTrue(gState.handCount[player1], copyGState.handCount[player1]);
call    0 returned 100%
        -:   91:	// Village card function also discards a card, so hand counts should be equal
        -:   92:	
        -:   93:	
        -:   94:	// Requirement:  Player 1 receives exactly 1 card from their own pile
        1:   95:	printf("\nPlayer 1 receives 1 card from their own pile\n");
call    0 returned 100%
        1:   96:	printf("Expected: %d\n", copyGState.deckCount[player1] - 1);
call    0 returned 100%
        1:   97:	printf("Result: %d\n", gState.deckCount[player1]);
call    0 returned 100%
        1:   98:	assertTrue(gState.deckCount[player1], copyGState.deckCount[player1] - 1);
call    0 returned 100%
        -:   99:	
        -:  100:	
        -:  101:	// Requirement:  Player 1 receives exactly 2 actions
        1:  102:	printf("\nPlayer 1 receives 2 actions\n");
call    0 returned 100%
        1:  103:	printf("Expected: %d\n", copyGState.numActions + 2);
call    0 returned 100%
        1:  104:	printf("Result: %d\n", gState.numActions);
call    0 returned 100%
        1:  105:	assertTrue(gState.numActions, copyGState.numActions + 2);
call    0 returned 100%
        -:  106:	
        -:  107:	
        -:  108:	
        -:  109:	
        -:  110:	
        -:  111:	
        -:  112:	
        -:  113:	// Requirement: No state change should occur for other players.
        1:  114:	printf("\nTest Player 2 was not effected\n");
call    0 returned 100%
        -:  115:	// Player 2's hand
        1:  116:	printf("\nPlayer 2 hand uneffected\n");
call    0 returned 100%
        1:  117:	printf("Expected: %d\n", copyGState.handCount[player2]);
call    0 returned 100%
        1:  118:	printf("Result: %d\n", gState.handCount[player2]);
call    0 returned 100%
        1:  119:    assertTrue(gState.handCount[player2],copyGState.handCount[player2]);
call    0 returned 100%
        -:  120:	//Player 2's deck
        1:  121:	printf("\nPlayer 2 deck uneffected\n");
call    0 returned 100%
        1:  122:	printf("Expected: %d\n", copyGState.deckCount[player2]);
call    0 returned 100%
        1:  123:	printf("Result: %d\n", gState.deckCount[player2]);
call    0 returned 100%
        1:  124:    assertTrue(gState.deckCount[player2],copyGState.deckCount[player2]);
call    0 returned 100%
        -:  125:	
        -:  126:	// Requirement: No state change should occur to the victory card piles and kingdom card piles.
        -:  127:	// Test Victory Piles
        1:  128:	printf("\nTest Victory piles were not effected\n");
call    0 returned 100%
        -:  129:	// Test Province Pile
        1:  130:	printf("\nProvince Pile uneffected\n");
call    0 returned 100%
        1:  131:	printf("Expected: %d\n", copyGState.supplyCount[province]);
call    0 returned 100%
        1:  132:	printf("Result: %d\n", gState.supplyCount[province]);
call    0 returned 100%
        1:  133:	assertTrue(gState.supplyCount[province],copyGState.supplyCount[province]);
call    0 returned 100%
        -:  134:	// Test Duchy Pile
        1:  135:	printf("\nDuchy Pile uneffected\n");
call    0 returned 100%
        1:  136:	printf("Expected: %d\n", copyGState.supplyCount[duchy]);
call    0 returned 100%
        1:  137:	printf("Result: %d\n", gState.supplyCount[duchy]);
call    0 returned 100%
        1:  138:	assertTrue(gState.supplyCount[duchy],copyGState.supplyCount[duchy]);
call    0 returned 100%
        -:  139:	// Test Estate Pile
        1:  140:	printf("\nEstate Pile uneffected\n");
call    0 returned 100%
        1:  141:	printf("Expected: %d\n", copyGState.supplyCount[estate]);
call    0 returned 100%
        1:  142:	printf("Result: %d\n", gState.supplyCount[estate]);
call    0 returned 100%
        1:  143:	assertTrue(gState.supplyCount[estate],copyGState.supplyCount[estate]);
call    0 returned 100%
        -:  144:	
        -:  145:	
        -:  146:	// Test Kingdom Cards
        1:  147:	printf("\nTest Kingdom card piles were not effected\n");
call    0 returned 100%
       11:  148:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  149:        printf("\nchecking card %d pile\n", k[i]);
call    0 returned 100%
       10:  150:		printf("Expected: %d\n", copyGState.supplyCount[k[i]]);
call    0 returned 100%
       10:  151:		printf("Result: %d\n", gState.supplyCount[k[i]]);
call    0 returned 100%
       10:  152:        assertTrue(gState.supplyCount[k[i]],copyGState.supplyCount[k[i]]);
call    0 returned 100%
        -:  153:    }
        -:  154:	
        -:  155: 
        -:  156:	/* 
        -:  157:	 * Print “TEST SUCCESSFULLY COMPLETED” If and only if the entire test  
        -:  158:	 * passes, and usually (this isn’t always possible for crashing bugs) print 
        -:  159:	 * "TEST FAILED” for a failure. This makes it easy to  process failing and passing tests. 
        -:  160:	 */
        1:  161:	if (failCnt)  // If the counter is greater than 0 print fail message
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  162:	{
    #####:  163:		printf("\n---------------------------------------------------\nTEST FAILED\n---------------------------------------------------\n\n");
call    0 never executed
        -:  164:	}
        -:  165:	else          // Else all tests pass, print pass message
        -:  166:	{
        1:  167:		printf("\n---------------------------------------------------\nTEST SUCCESSFULLY COMPLETED\n---------------------------------------------------\n\n");
call    0 returned 100%
        -:  168:	}
        -:  169:	  
        1:  170:	return 0;
        -:  171:}
        -:  172:  
