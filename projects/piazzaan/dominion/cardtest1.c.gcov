        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * -----------------------------------------------------------------------
        -:    3: * cardtest1.c
        -:    4: * CS 362_400
        -:    5: * Antonio Piazza
        -:    6: * piazzaan
        -:    7: * 7/15/2108
        -:    8: * 
        -:    9: * Card test 1 for Dominion Smithy card
        -:   10: * 
        -:   11: * Include the following lines in your makefile:
        -:   12: *
        -:   13: * echo "cardtest1.c:" >> unittestresults.out
        -:   14: * gcc -o cardtest1 -g  cardtest1.c dominion.c rngs.c $(CFLAGS)
        -:   15: * ./cardtest1 >> unittestresults.out
        -:   16: * gcov cardtest1.c
        -:   17: *
        -:   18: * references: 
        -:   19: * -----------------------------------------------------------------------
        -:   20: */
        -:   21:
        -:   22:#include "dominion.h"
        -:   23:#include <stdio.h>
        -:   24:#include "dominion_helpers.h"
        -:   25:#include "rngs.h"
        -:   26:
        -:   27:
        -:   28:// Variable to keep count of test fails
        -:   29:int failCnt = 0;
        -:   30:
        -:   31:/*
        -:   32: * To avoid making it hard to collect coverage when a test fails, 
        -:   33: * using my own asserttrue function instead of the standard C assert 
        -:   34: * (which basically crashes the code and fails to collect coverage). 
        -:   35: * My assert also prints whether the test passes or fails.  If the test   
        -:   36: * fails the fail counter int variable will increment by 1.
        -:   37: */
function assertTrue called 17 returned 100% blocks executed 100%
       17:   38: void assertTrue(int int1, int int2) 
        -:   39: {
       17:   40:	if (int1 == int2) 
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
        -:   41:	{
       15:   42:		printf("Test Passed\n");
call    0 returned 100%
        -:   43:	} 
        -:   44:	else
        -:   45:	{
        2:   46:		printf("Test Failed\n");
call    0 returned 100%
        2:   47:		failCnt++;
        -:   48:	}
       17:   49: }
        -:   50: 
        -:   51: 
        -:   52: // Main function
function main called 1 returned 100% blocks executed 98%
        1:   53: int main()
        -:   54: {
        -:   55:	int i;
        1:   56:	int numPlayer = 2;
        1:   57:	int player1 = 0, handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   58:	int player2 = 1;
        1:   59:	int seed = 1000;
        1:   60:	int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   61:		, remodel, smithy, village, baron, great_hall};
        -:   62:		
        -:   63:	// Initialize two game states
        -:   64:	struct gameState gState, copyGState;
        -:   65:
        -:   66:
        -:   67: 
        1:   68:	printf ("\n---------------------------------------------------\nTESTING SMITHY CARD:\n---------------------------------------------------");
call    0 returned 100%
        -:   69:	
        -:   70:	// Set Game State
        1:   71:	memset(&gState,23,sizeof(struct gameState));
        1:   72:	memset(&copyGState,23,sizeof(struct gameState));
        -:   73:	
        -:   74:	// Initialize game
        1:   75:	initializeGame(numPlayer, k, seed, &gState);
call    0 returned 100%
        -:   76:	
        -:   77:	// copy the game state to the copy to preserve the game state
        1:   78:	 memcpy(&copyGState, &gState, sizeof(struct gameState));
        -:   79:	 
        -:   80:	// call card effect function for Smithy
        1:   81:	cardEffect(smithy, choice1, choice2, choice3, &gState, handpos, &bonus);
call    0 returned 100%
        -:   82:	
        -:   83:	
        -:   84:	// Check Results
        -:   85:	// Requirement:  Current player should receive exactly 3 cards
        1:   86:	printf("\nPlayer 1 receives exactly 3 cards\n");
call    0 returned 100%
        1:   87:	printf("Expected: %d\n", copyGState.handCount[player1]+2);
call    0 returned 100%
        1:   88:	printf("Result: %d\n", gState.handCount[player1]);
call    0 returned 100%
        1:   89:    assertTrue(gState.handCount[player1],copyGState.handCount[player1]+2);
call    0 returned 100%
        -:   90:	
        -:   91:	// Requirement:  The 3 cards should come from player's own pile.
        1:   92:	printf("\nCard's come from Player 1's pile\n");
call    0 returned 100%
        1:   93:	printf("Expected: %d\n", copyGState.deckCount[player1]-3);
call    0 returned 100%
        1:   94:	printf("Result: %d\n", gState.deckCount[player1]);
call    0 returned 100%
        1:   95:    assertTrue(gState.deckCount[player1],copyGState.deckCount[player1]-3);
call    0 returned 100%
        -:   96:	
        -:   97:	// Requirement: No state change should occur for other players.
        1:   98:	printf("\nTest Player 2 was not effected\n");
call    0 returned 100%
        -:   99:	// Player 2's hand
        1:  100:	printf("\nPlayer 2 hand uneffected\n");
call    0 returned 100%
        1:  101:	printf("Expected: %d\n", copyGState.handCount[player2]);
call    0 returned 100%
        1:  102:	printf("Result: %d\n", gState.handCount[player2]);
call    0 returned 100%
        1:  103:    assertTrue(gState.handCount[player2],copyGState.handCount[player2]);
call    0 returned 100%
        -:  104:	//Player 2's deck
        1:  105:	printf("\nPlayer 2 deck uneffected\n");
call    0 returned 100%
        1:  106:	printf("Expected: %d\n", copyGState.deckCount[player2]);
call    0 returned 100%
        1:  107:	printf("Result: %d\n", gState.deckCount[player2]);
call    0 returned 100%
        1:  108:    assertTrue(gState.deckCount[player2],copyGState.deckCount[player2]);
call    0 returned 100%
        -:  109:	
        -:  110:	// Requirement: No state change should occur to the victory card piles and kingdom card piles.
        -:  111:	// Test Victory Piles
        1:  112:	printf("\nTest Victory piles were not effected\n");
call    0 returned 100%
        -:  113:	// Test Province Pile
        1:  114:	printf("\nProvince Pile uneffected\n");
call    0 returned 100%
        1:  115:	printf("Expected: %d\n", copyGState.supplyCount[province]);
call    0 returned 100%
        1:  116:	printf("Result: %d\n", gState.supplyCount[province]);
call    0 returned 100%
        1:  117:	assertTrue(gState.supplyCount[province],copyGState.supplyCount[province]);
call    0 returned 100%
        -:  118:	// Test Duchy Pile
        1:  119:	printf("\nDuchy Pile uneffected\n");
call    0 returned 100%
        1:  120:	printf("Expected: %d\n", copyGState.supplyCount[duchy]);
call    0 returned 100%
        1:  121:	printf("Result: %d\n", gState.supplyCount[duchy]);
call    0 returned 100%
        1:  122:	assertTrue(gState.supplyCount[duchy],copyGState.supplyCount[duchy]);
call    0 returned 100%
        -:  123:	// Test Estate Pile
        1:  124:	printf("\nEstate Pile uneffected\n");
call    0 returned 100%
        1:  125:	printf("Expected: %d\n", copyGState.supplyCount[estate]);
call    0 returned 100%
        1:  126:	printf("Result: %d\n", gState.supplyCount[estate]);
call    0 returned 100%
        1:  127:	assertTrue(gState.supplyCount[estate],copyGState.supplyCount[estate]);
call    0 returned 100%
        -:  128:	
        -:  129:	
        -:  130:	// Test Kingdom Cards
        1:  131:	printf("\nTest Kingdom card piles were not effected\n");
call    0 returned 100%
       11:  132:	for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  133:        printf("\nchecking card %d pile\n", k[i]);
call    0 returned 100%
       10:  134:		printf("Expected: %d\n", copyGState.supplyCount[k[i]]);
call    0 returned 100%
       10:  135:		printf("Result: %d\n", gState.supplyCount[k[i]]);
call    0 returned 100%
       10:  136:        assertTrue(gState.supplyCount[k[i]],copyGState.supplyCount[k[i]]);
call    0 returned 100%
        -:  137:    }
        -:  138:	
        -:  139: 
        -:  140:	/* 
        -:  141:	 * Print “TEST SUCCESSFULLY COMPLETED” If and only if the entire test  
        -:  142:	 * passes, and usually (this isn’t always possible for crashing bugs) print 
        -:  143:	 * "TEST FAILED” for a failure. This makes it easy to  process failing and passing tests. 
        -:  144:	 */
        1:  145:	if (failCnt)  // If the counter is greater than 0 print fail message
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  146:	{
        1:  147:		printf("\n---------------------------------------------------\nTEST FAILED\n---------------------------------------------------\n\n");
call    0 returned 100%
        -:  148:	}
        -:  149:	else          // Else all tests pass, print pass message
        -:  150:	{
    #####:  151:		printf("\n---------------------------------------------------\nTEST SUCCESSFULLY COMPLETED\n---------------------------------------------------\n\n");
call    0 never executed
        -:  152:	}
        -:  153:	  
        1:  154:	return 0;
        -:  155:}
        -:  156:  
